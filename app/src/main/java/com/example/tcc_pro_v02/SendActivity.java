package com.example.tcc_pro_v02;

import android.bluetooth.BluetoothAdapter;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class SendActivity extends AppCompatActivity {

    public static int ENABLE_BLUETOOTH = 1;
    public static int SELECT_PAIRED_DEVICE = 2;
    public static int SELECT_DISCOVERED_DEVICE = 3;

    static TextView statusMessage;
    static TextView textSpace;
    ConnectionThread connect;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_send_data);

        statusMessage = findViewById(R.id.textView3);
        textSpace = findViewById(R.id.textView4);
        Button find = findViewById(R.id.button_find);
        Button list = findViewById(R.id.button_list);
        Button send = findViewById(R.id.button_send);


        BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();
        if (btAdapter == null) {
            statusMessage.setText("Que pena! Hardware Bluetooth não está funcionando :(");
        } else {
            statusMessage.setText("Ótimo! Hardware Bluetooth está funcionando :)");
            if(!btAdapter.isEnabled()) {
                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, ENABLE_BLUETOOTH);
                statusMessage.setText("Solicitando ativação do Bluetooth...");

            } else {
                statusMessage.setText("Bluetooth já ativado :)");
            }
        }

        find.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                discoverDevices(v);
            }
        });

        list.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                searchPairedDevices(v);
            }
        });

        send.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendMessage(v);
            }
        });
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if(requestCode == ENABLE_BLUETOOTH) {
            if(resultCode == RESULT_OK) {
                statusMessage.setText("Bluetooth ativado :D");
            }
            else {
                statusMessage.setText("Bluetooth não ativado :(");
            }
        }
        else if(requestCode == SELECT_PAIRED_DEVICE || requestCode == SELECT_DISCOVERED_DEVICE) {
            if(resultCode == RESULT_OK) {
                statusMessage.setText("Você selecionou " + data.getStringExtra("btDevName") + "\n"
                        + data.getStringExtra("btDevAddress"));

                connect = new ConnectionThread(data.getStringExtra("btDevAddress"));
                connect.start();
            }
            else {
                statusMessage.setText("Nenhum dispositivo selecionado :(");
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    public void searchPairedDevices(View view) {
        Intent searchPairedDevicesIntent = new Intent(this, PairedDevices.class);
        startActivityForResult(searchPairedDevicesIntent, SELECT_PAIRED_DEVICE);
    }

    public void discoverDevices(View view) {
        Intent searchPairedDevicesIntent = new Intent(this, DiscoveredDevices.class);
        startActivityForResult(searchPairedDevicesIntent, SELECT_DISCOVERED_DEVICE);
    }

    public void sendMessage(View view) {
        int[] firstData = {
            0x0C, 0x94, 0x61, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0xFA, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00,
            0x0C, 0x94, 0x73, 0x00, 0x0C, 0x94, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x27, 0x00,
            0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x26, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x25, 0x00, 0x28, 0x00, 0x2B, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
            0x00, 0x08, 0x00, 0x02, 0x01, 0x00, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x11, 0x24, 0x1F, 0xBE, 0xCF, 0xEF, 0xD8, 0xE0, 0xDE, 0xBF, 0xCD, 0xBF, 0x21, 0xE0,
            0xA0, 0xE0, 0xB1, 0xE0, 0x01, 0xC0, 0x1D, 0x92, 0xA9, 0x30, 0xB2, 0x07, 0xE1, 0xF7, 0x0E, 0x94,
            0x44, 0x01, 0x0C, 0x94, 0xBE, 0x01, 0x0C, 0x94, 0x00, 0x00, 0x83, 0x30, 0x81, 0xF0, 0x28, 0xF4,
            0x81, 0x30, 0x99, 0xF0, 0x82, 0x30, 0xA9, 0xF0, 0x08, 0x95, 0x87, 0x30, 0xA9, 0xF0, 0x88, 0x30,
            0xC9, 0xF0, 0x84, 0x30, 0xB1, 0xF4, 0x80, 0x91, 0x80, 0x00, 0x8F, 0x7D, 0x03, 0xC0, 0x80, 0x91,
            0x80, 0x00, 0x8F, 0x77, 0x80, 0x93, 0x80, 0x00, 0x08, 0x95, 0x84, 0xB5, 0x8F, 0x77, 0x84, 0xBD,
            0x08, 0x95, 0x84, 0xB5, 0x8F, 0x7D, 0xFB, 0xCF, 0x80, 0x91, 0xB0, 0x00, 0x8F, 0x77, 0x80, 0x93,
            0xB0, 0x00, 0x08, 0x95, 0x80, 0x91, 0xB0, 0x00, 0x8F, 0x7D, 0xF9, 0xCF, 0x1F, 0x93, 0xCF, 0x93,
            0xDF, 0x93, 0xE0, 0xEB, 0xF0, 0xE0, 0x94, 0x91, 0xEC, 0xE9, 0xF0, 0xE0, 0xD4, 0x91, 0xE8, 0xE8,
            0xF0, 0xE0, 0xC4, 0x91, 0xCC, 0x23, 0xB9, 0xF0, 0x18, 0x2F, 0x99, 0x23, 0x19, 0xF0, 0x89, 0x2F,
            0x0E, 0x94, 0x75, 0x00, 0xEC, 0x2F, 0xF0, 0xE0, 0xEE, 0x0F, 0xFF, 0x1F, 0xE4, 0x58, 0xFF, 0x4F,
            0xA5, 0x91, 0xB4, 0x91, 0x8F, 0xB7, 0xF8, 0x94, 0xEC, 0x91, 0x11, 0x11, 0x08, 0xC0, 0xD0, 0x95,
            0xDE, 0x23, 0xDC, 0x93, 0x8F, 0xBF, 0xDF, 0x91, 0xCF, 0x91, 0x1F, 0x91, 0x08, 0x95, 0xDE, 0x2B,
            0xF8, 0xCF, 0xCF, 0x93, 0xDF, 0x93, 0x90, 0xE0, 0xFC, 0x01, 0xE6, 0x56, 0xFF, 0x4F, 0x24, 0x91,
            0x8A, 0x57, 0x9F, 0x4F, 0xFC, 0x01, 0x84, 0x91, 0x88, 0x23, 0xD1, 0xF0, 0x90, 0xE0, 0x88, 0x0F,
            0x99, 0x1F, 0xFC, 0x01, 0xE8, 0x59, 0xFF, 0x4F, 0xA5, 0x91, 0xB4, 0x91, 0xFC, 0x01, 0xE4, 0x58,
        };
        int[] secondData = {
            0xFF, 0x4F, 0xC5, 0x91, 0xD4, 0x91, 0x61, 0x11, 0x0E, 0xC0, 0x9F, 0xB7, 0xF8, 0x94, 0x8C, 0x91,
            0xE2, 0x2F, 0xE0, 0x95, 0x8E, 0x23, 0x8C, 0x93, 0x28, 0x81, 0xE2, 0x23, 0xE8, 0x83, 0x9F, 0xBF,
            0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0x8F, 0xB7, 0xF8, 0x94, 0xEC, 0x91, 0xE2, 0x2B, 0xEC, 0x93,
            0x8F, 0xBF, 0xF6, 0xCF, 0x1F, 0x92, 0x0F, 0x92, 0x0F, 0xB6, 0x0F, 0x92, 0x11, 0x24, 0x2F, 0x93,
            0x3F, 0x93, 0x8F, 0x93, 0x9F, 0x93, 0xAF, 0x93, 0xBF, 0x93, 0x80, 0x91, 0x05, 0x01, 0x90, 0x91,
            0x06, 0x01, 0xA0, 0x91, 0x07, 0x01, 0xB0, 0x91, 0x08, 0x01, 0x30, 0x91, 0x04, 0x01, 0x23, 0xE0,
            0x23, 0x0F, 0x2D, 0x37, 0x58, 0xF5, 0x01, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0x20, 0x93, 0x04, 0x01,
            0x80, 0x93, 0x05, 0x01, 0x90, 0x93, 0x06, 0x01, 0xA0, 0x93, 0x07, 0x01, 0xB0, 0x93, 0x08, 0x01,
            0x80, 0x91, 0x00, 0x01, 0x90, 0x91, 0x01, 0x01, 0xA0, 0x91, 0x02, 0x01, 0xB0, 0x91, 0x03, 0x01,
            0x01, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0x80, 0x93, 0x00, 0x01, 0x90, 0x93, 0x01, 0x01, 0xA0, 0x93,
            0x02, 0x01, 0xB0, 0x93, 0x03, 0x01, 0xBF, 0x91, 0xAF, 0x91, 0x9F, 0x91, 0x8F, 0x91, 0x3F, 0x91,
            0x2F, 0x91, 0x0F, 0x90, 0x0F, 0xBE, 0x0F, 0x90, 0x1F, 0x90, 0x18, 0x95, 0x26, 0xE8, 0x23, 0x0F,
            0x02, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0xD2, 0xCF, 0x78, 0x94, 0x84, 0xB5, 0x82, 0x60, 0x84, 0xBD,
            0x84, 0xB5, 0x81, 0x60, 0x84, 0xBD, 0x85, 0xB5, 0x82, 0x60, 0x85, 0xBD, 0x85, 0xB5, 0x81, 0x60,
            0x85, 0xBD, 0x80, 0x91, 0x6E, 0x00, 0x81, 0x60, 0x80, 0x93, 0x6E, 0x00, 0x10, 0x92, 0x81, 0x00,
            0x80, 0x91, 0x81, 0x00, 0x82, 0x60, 0x80, 0x93, 0x81, 0x00, 0x80, 0x91, 0x81, 0x00, 0x81, 0x60,
            0x80, 0x93, 0x81, 0x00, 0x80, 0x91, 0x80, 0x00, 0x81, 0x60, 0x80, 0x93, 0x80, 0x00, 0x80, 0x91,
            0xB1, 0x00, 0x84, 0x60, 0x80, 0x93, 0xB1, 0x00, 0x80, 0x91, 0xB0, 0x00, 0x81, 0x60, 0x80, 0x93,
            0xB0, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x84, 0x60, 0x80, 0x93, 0x7A, 0x00, 0x80, 0x91, 0x7A, 0x00,
            0x82, 0x60, 0x80, 0x93, 0x7A, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x81, 0x60, 0x80, 0x93, 0x7A, 0x00,
            0x80, 0x91, 0x7A, 0x00, 0x80, 0x68, 0x80, 0x93, 0x7A, 0x00, 0x10, 0x92, 0xC1, 0x00, 0x60, 0xE0,
            0x85, 0xE0, 0x0E, 0x94, 0xC9, 0x00, 0x60, 0xE0, 0x86, 0xE0, 0x0E, 0x94, 0xC9, 0x00, 0x60, 0xE0,
            0x87, 0xE0, 0x0E, 0x94, 0xC9, 0x00, 0x60, 0xE0, 0x88, 0xE0, 0x0E, 0x94, 0xC9, 0x00, 0x61, 0xE0,
            0x82, 0xE0, 0x0E, 0x94, 0xC9, 0x00, 0xC3, 0xEB, 0xD0, 0xE0, 0x0F, 0xE9, 0x10, 0xE0, 0x9B, 0xE8,
            0xE9, 0x2E, 0x90, 0xE0, 0xF9, 0x2E, 0xFE, 0x01, 0x84, 0x91, 0xF8, 0x01, 0xC4, 0x90, 0xF7, 0x01,
            0xD4, 0x90, 0xDD, 0x20, 0x79, 0xF0, 0x81, 0x11, 0x0E, 0x94, 0x75, 0x00, 0xED, 0x2D, 0xF0, 0xE0,
            0xEE, 0x0F, 0xFF, 0x1F, 0xEE, 0x58, 0xFF, 0x4F, 0xA5, 0x91, 0xB4, 0x91, 0x8C, 0x91, 0xC8, 0x22,
            0x81, 0xE0, 0x09, 0xF4, 0x80, 0xE0, 0x0E, 0x94, 0x9E, 0x00, 0xE5, 0xCF, 0xF8, 0x94, 0xFF, 0xCF,
        };
        final byte[] firstDataBatch = this.intToByte(firstData);
        final byte[] secondDataBatch = this.intToByte(secondData);
        connect.write(firstDataBatch);
        Handler teste = new Handler();
        teste.postDelayed(new Runnable() {
            @Override
            public void run() {
                connect.write(secondDataBatch);
            }
        }, 5000);
    }

    private byte[] intToByte(@NonNull int[] data) {
        byte[] bytes = new byte[data.length];
        for (int i=0; i<data.length; i++) {
            bytes[i] = (byte)data[i];
        }
        return bytes;
    }

    public static Handler handler = new Handler() {
        @Override
        public void handleMessage(@NonNull Message msg) {

            Bundle bundle = msg.getData();
            byte[] data = bundle.getByteArray("data");
            String dataString= new String(data);

            if(dataString.equals("---N"))
                statusMessage.setText("Ocorreu um erro durante a conexão D:");
            else if(dataString.equals("---S"))
                statusMessage.setText("Conectado :D");
            else {

                textSpace.setText(new String(data));
            }
        }
    };
}
